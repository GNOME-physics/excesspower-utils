#!/usr/bin/env python
import sys
import re
from collections import defaultdict

import matplotlib
matplotlib.use("agg")
from matplotlib import pyplot

import numpy

pattern = re.compile("(.*)\(([0-9]+:[0-9]+:[0-9]+)\): ([0-9]+) seconds")

with open(sys.argv[1]) as inf:
    input = inf.readlines()

real_typedict = defaultdict(list)
stream_typedict = defaultdict(list)

#no_display = ["Trigger", "After", "Undersampled", "Energy"]
no_display = []

import curses

def main(stdscr):
    curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)

    max_diff = 0
    while input:
        line = input.pop(0)
        match = re.search(pattern, line)
        if match is None:
            continue

        #import pdb; pdb.set_trace()
        type, real_time, stream_time = match.group(1).strip(), match.group(2), float(match.group(3))
        if any([nod in type for nod in no_display]): continue
        hr, mn, s = real_time.split(":")
        real_time = float(s) + (float(mn) + float(hr)*60)*60
        real_typedict[type].append(real_time)
        stream_typedict[type].append(stream_time)

        import operator
        latest_stream = sorted([(tm[-1], e) for e, tm in stream_typedict.iteritems()])
        earliest_stream = latest_stream[0]
        latest_stream = latest_stream[-1]
        overall_latency = latest_stream[0] - earliest_stream[0]
        max_diff = max(overall_latency, max_diff)

        #print type, real_time, stream_time
        elems = stream_typedict.keys()
        msg = ""
        stdscr.addstr(0, 0, "Pipeline time difference %d (max: %d)\n" % (overall_latency, max_diff))
        try:
            for elem in stream_typedict:
                substr = "%s: %s (%d)\n" % (elem, real_typedict[elem][-1], stream_typedict[elem][-1])
                if elem == type:
                    stdscr.addstr(substr, curses.A_STANDOUT)
                elif elem == latest_stream[1]:
                    stdscr.addstr(substr, curses.color_pair(1))
                elif elem == earliest_stream[1]:
                    stdscr.addstr(substr, curses.color_pair(2))
                else:
                    stdscr.addstr(substr)
            msg += substr
        except curses.error:
            pass
        stdscr.refresh()

        import time
        time.sleep(0.1)

from curses.wrapper import wrapper
wrapper(main)

print "done"

mints = min([min(v) for v in stream_typedict.values()])

pyplot.figure()
maxts = 0
for typ, array in stream_typedict.iteritems():
    if "Trigger" in typ: continue
    st = numpy.array(array) - mints
    plt = sorted(zip(real_typedict[typ], st))
    plt = numpy.transpose(plt)
    #import pdb; pdb.set_trace()
    pyplot.plot(plt[0], plt[1], label=typ)

#pyplot.title(typ)
pyplot.ylabel("stream time")
pyplot.xlabel("real time")
pyplot.grid()
pyplot.legend(loc="lower right")

pyplot.savefig("timeline.png")
