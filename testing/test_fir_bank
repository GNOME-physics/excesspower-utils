#!/usr/bin/env python

import sys

import numpy

import pygtk
pygtk.require("2.0")
import gobject
gobject.threads_init()
import pygst
pygst.require("0.10")

from glue.ligolw import utils, lsctables, table, ligolw

import gst

#
# Default values
#
rate = 16384
df = 1/4.0
fhigh = 8192

sbtable = table.get_table(utils.load_filename(sys.argv[1]), lsctables.SnglBurstTable.tableName)
#xmldoc = ep.create_bank_xml(flow=16, fhigh=8000, band=4, duration=1/8.0, level=0, ndof=1, frequency_overlap=0, detector="H1")

# Stupid content handlers -- invoke them here, after reading XML
from gstlal import pipeparts
import gstlal.excesspower as ep
from gstlal.epparts import EPHandler

pipeline = gst.Pipeline("firtest")
mainloop = gobject.MainLoop()

#
# Fake PSD and correlation
#

handler = EPHandler(mainloop, pipeline)
psd = handler.build_default_psd(rate, df, fhigh)
corr = handler.build_default_correlation(rate)

#
# Data source
#

# Gaussian noise
head = pipeparts.mkaudiotestsrc(pipeline, wave=9, volume=1.0) #, blocksize=16384*8*8, num_buffers=10)
head = pipeparts.mkcapsfilter(pipeline, head, "audio/x-raw-float,rate=16384")
head = pipeparts.mkprogressreport(pipeline, head, "data source")

#
# Build FIR bank
#

print "Generating filter bank..."
filter_bank, freq_filters = ep.build_filter_from_xml(psd, sbtable, corr = corr)
print "...done."

#
# FIR bank
#

dtee = head = pipeparts.mktee(pipeline, head)

nbanks=2
stride = len(filter_bank)/nbanks

tails = []
for i in range(nbanks):
	head = pipeparts.mkqueue(pipeline, dtee)
	head = firbank = pipeparts.mkfirbank(pipeline, head, block_stride=rate, time_domain=False)
	firbank.set_property("fir_matrix", filter_bank[i*stride:(i+1)*stride])
	latency = len(firbank.get_property("fir_matrix")[0])/2+1
	firbank.set_property( "latency", latency )

	head = pipeparts.mkprogressreport(pipeline, head, "FIR bank %d" % i)
	head = pipeparts.mkqueue(pipeline, head)

	#
	# Deinterleave the channel streams
	#

	tails.append( pipeparts.mkgeneric(pipeline, head, "deinterleave") )


#
# Reintegrate the streams
#

head = funnel = pipeparts.mkgeneric(pipeline, None, "funnel")

i = 0
for tail in tails:
	for j in range(stride):
			pipeparts.src_deferred_link(tail, "src%d" % j, 
				funnel.get_request_pad("sink%d" % i))
			i += 1

#
# Divide by the appropriate normalization
#

mu_sq = ep.build_wide_filter_norm(corr, freq_filters, level=0, frequency_overlap=0)
mu_sq = 1.0/numpy.sqrt(mu_sq[0])
print "Calculated matrix mixer element = %f" % mu_sq
head = pipeparts.mkaudioamplify(pipeline, head, amplification=mu_sq)

head = pipeparts.mkprogressreport(pipeline, head, "sink")
pipeparts.mkfilesink(pipeline, head, "tiles.dat")

#
# This pipeline ain' go nowhere, no how.
#

#pipeparts.mkfakesink(pipeline, head)

#
# Run
#
exit()
if pipeline.set_state( gst.STATE_PLAYING ) == gst.STATE_CHANGE_FAILURE:
	raise RuntimeError( "pipeline failed to enter PLAYING state" )
mainloop.run()
